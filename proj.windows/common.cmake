if (${TARGET_BUILD_DEBUG})
	set(CMAKE_BUILD_TYPE Debug)
endif()

if (WIN32)

	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /EHsc -D_CRT_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS -DGIT_SRC_VER=\\\"${GIT_VER}\\\" -DGIT_BRANCH_VER=\\\"${GIT_BRANCH_VER}\\\" ")
	set(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG /ignore:4099")
	set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} /DEBUG /ignore:4099")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
    add_definitions(/wd4503)

	if (${USE_MSVC_STATIC_LIB})
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
		set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MT")
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
		set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MT")
		set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
		set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} /MT")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
		set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /MT")
	endif ()

	if (MSVC14)
	    add_definitions(/wd4267)
        link_directories (${SDK_PUBLIC_PROJECT_DIR}/lib/windows/vs2015)
    elseif (MSVC12)
        if (${CMAKE_CL_64})
            add_definitions(/wd4267)
            if (${USE_MSVC_STATIC_LIB})
               # link_directories (${SDK_PUBLIC_PROJECT_DIR}/lib/windows/x64/vs2013_mt)
            else ()
                #link_directories (${SDK_PUBLIC_PROJECT_DIR}/lib/windows/x64/vs2013)
            endif ()
        else () #x86
            if (${USE_MSVC_STATIC_LIB})
               # link_directories (${SDK_PUBLIC_PROJECT_DIR}/lib/windows/x86/vs2013_mt)
            else ()
               # link_directories (${SDK_PUBLIC_PROJECT_DIR}/lib/windows/x86/vs2013)
            endif ()
        endif ()
	endif ()
elseif (ANDROID)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os -fvisibility=hidden")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os -std=c++11 -fno-exceptions -fno-rtti -fvisibility=hidden -DGIT_SRC_VER=\\\"${GIT_VER}\\\" -DGIT_BRANCH_VER=\\\"${GIT_BRANCH_VER}\\\" ")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--gc-sections -Xlinker --build-id")
elseif (APPLE)
  include_directories(${SDK_PUBLIC_PROJECT_DIR}/interface/objc)
	set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -ObjC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGIT_SRC_VER=\\\"${GIT_VER}\\\" ")
    if (IOS)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fembed-bitcode -DGIT_BRANCH_VER=\\\"${GIT_BRANCH_VER}\\\" ")
      set(CMAKE_C_FLAGS "-fembed-bitcode")
    endif()
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os")
elseif (UNIX)
  execute_process(COMMAND "git" "rev-parse" "--short" "HEAD" OUTPUT_VARIABLE GIT_VER)
  string(STRIP ${GIT_VER} GIT_VER)
  if(${FEATURE_SDK_BUILT_AS_DYNAMIC_LIB})
      set(CMAKE_SHARED_LINKER_FLAGS "-Wl,-Bsymbolic -Xlinker --build-id")
  endif()

  # set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wconversion")
  # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion")

	if (${TARGET_BUILD_DEBUG})
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -O0 -DDEBUG -g")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDEBUG -fsanitize=address -DGIT_SRC_VER=\\\"${GIT_VER}\\\" -DGIT_BRANCH_VER=\\\"${GIT_BRANCH_VER}\\\" -O0 -g -std=c++11")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -g -Wl,-z,defs")
		list (APPEND LINK_LIBS asan)
	else ()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -g -fvisibility=hidden")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGIT_SRC_VER=\\\"${GIT_VER}\\\" -DGIT_BRANCH_VER=\\\"${GIT_BRANCH_VER}\\\" -O2 -g -std=c++11 -fvisibility=hidden")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-comment -Wno-unused-value -Wno-switch")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -g -static-libstdc++ -Wl,-z,defs")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--exclude-libs,libevent.a -Wl,--exclude-libs,libevent_pthreads.a -Wl,--exclude-libs,libcommon.a -Wl,--exclude-libs,libconfig_engine.a -Wl,--exclude-libs,libargus.a -Wl,--exclude-libs,libcrypto.a -Wl,--exclude-libs,libcommon.a -Wl,--exclude-libs,libstdc++.a -Wl,--exclude-libs,libgcc.a")
    endif()


    add_definitions (-fPIC)
    execute_process(COMMAND bash "-c" "basename ${CMAKE_C_COMPILER}|cut -d'-' -f1|tr -d '\n'" OUTPUT_VARIABLE GCC_NAME)
    if(GCC_NAME MATCHES "cc" OR GCC_NAME MATCHES "gcc")

        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
        if (CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
            SET(UNIX_X_COMPILING_TARGET_LIB_ARCH "x64")
        elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
            message("####TODO##: need add x86 32bit host linux")
            SET(UNIX_X_COMPILING_TARGET_LIB_ARCH "x86")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
            set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32")
        endif()
    else(GCC_NAME MATCHES "cc" OR GCC_NAME MATCHES "gcc")
        set(UNIX_X_COMPILING_TARGET_LIB_ARCH ${GCC_NAME})
        add_definitions (-DSIXTY_FOUR_BIT)
    endif()

    set(LINUX_LIB_DIR ${SDK_PUBLIC_PROJECT_DIR}/lib/linux/${UNIX_X_COMPILING_TARGET_LIB_ARCH})
    set(SDK_PREBUILT_LINK_LIB_DIR ${SDK_PUBLIC_PROJECT_DIR}/../prebuilt/lib/linux/${UNIX_X_COMPILING_TARGET_LIB_ARCH})

    execute_process(COMMAND bash "-c" "mkdir -p ${LINUX_LIB_DIR}")
    execute_process(COMMAND bash "-c" "mkdir -p ${SDK_PREBUILT_LINK_LIB_DIR}")
    link_directories (${LINUX_LIB_DIR})
endif()


if (${USE_MEDIA_ENGINE_STATIC_LIB})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DMEDIA_ENGINE_STATIC_LIB")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMEDIA_ENGINE_STATIC_LIB")
    if (UNIX)
        link_directories (${SDK_PREBUILT_LINK_LIB_DIR})
    endif()
endif ()
